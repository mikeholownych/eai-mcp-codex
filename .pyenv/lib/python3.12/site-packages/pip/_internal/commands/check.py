import logging
from optparse import Values
from typing import List

from pip._internal.cli.base_command import Command
from pip._internal.cli.status_codes import ERROR, SUCCESS
from pip._internal.operations.check import (
    check_package_set,
    create_package_set_from_installed,
    warn_legacy_versions_and_specifiers,
)
from pip._internal.utils.misc import write_output

logger = logging.getLogger(__name__)


class CheckCommand(Command):
    """Verify installed packages have compatible dependencies."""

    usage = """
      %prog [options]"""

    def run(self, options: Values, args: List[str]) -> int:
        """
        Verify installed packages for missing or conflicting dependencies and report results.
        
        Builds a package set from the current environment, checks for legacy specifiers, and validates
        dependency relationships. For each package with problems, prints user-facing messages describing
        missing dependencies or version conflicts. Returns a process exit code: SUCCESS (no problems)
        or ERROR (any missing, conflicting, or parsing issues).
        
        Parameters:
            options (optparse.Values): Command options (not used by this command).
            args (List[str]): Positional arguments passed to the command (ignored).
        
        Returns:
            int: EXIT status constant (pip._internal.cli.status_codes.SUCCESS or ERROR).
        """
        package_set, parsing_probs = create_package_set_from_installed()
        warn_legacy_versions_and_specifiers(package_set)
        missing, conflicting = check_package_set(package_set)

        for project_name in missing:
            version = package_set[project_name].version
            for dependency in missing[project_name]:
                write_output(
                    "%s %s requires %s, which is not installed.",
                    project_name,
                    version,
                    dependency[0],
                )

        for project_name in conflicting:
            version = package_set[project_name].version
            for dep_name, dep_version, req in conflicting[project_name]:
                write_output(
                    "%s %s has requirement %s, but you have %s %s.",
                    project_name,
                    version,
                    req,
                    dep_name,
                    dep_version,
                )

        if missing or conflicting or parsing_probs:
            return ERROR
        else:
            write_output("No broken requirements found.")
            return SUCCESS
