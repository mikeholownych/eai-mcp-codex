import os
import textwrap
from optparse import Values
from typing import Any, List

from pip._internal.cli.base_command import Command
from pip._internal.cli.status_codes import ERROR, SUCCESS
from pip._internal.exceptions import CommandError, PipError
from pip._internal.utils import filesystem
from pip._internal.utils.logging import getLogger

logger = getLogger(__name__)


class CacheCommand(Command):
    """
    Inspect and manage pip's wheel cache.

    Subcommands:

    - dir: Show the cache directory.
    - info: Show information about the cache.
    - list: List filenames of packages stored in the cache.
    - remove: Remove one or more package from the cache.
    - purge: Remove all items from the cache.

    ``<pattern>`` can be a glob expression or a package name.
    """

    ignore_require_venv = True
    usage = """
        %prog dir
        %prog info
        %prog list [<pattern>] [--format=[human, abspath]]
        %prog remove <pattern>
        %prog purge
    """

    def add_options(self) -> None:
        """
        Register command-line options for the cache command.
        
        Adds a `--format` option (stored as `list_format`) with choices "human" (default) and "abspath",
        then inserts the command's option group into the parser.
        """
        self.cmd_opts.add_option(
            "--format",
            action="store",
            dest="list_format",
            default="human",
            choices=("human", "abspath"),
            help="Select the output format among: human (default) or abspath",
        )

        self.parser.insert_option_group(0, self.cmd_opts)

    def run(self, options: Values, args: List[str]) -> int:
        """
        Dispatch the cache subcommand specified in args (dir, info, list, remove, purge).
        
        If options.cache_dir is not set, logs an error and returns ERROR. The first element of
        args must be one of the supported actions; otherwise logs an error and returns ERROR.
        The selected handler is invoked with (options, remaining_args). If a PipError is
        raised by a handler, its message is logged and ERROR is returned. On successful
        completion returns SUCCESS.
        """
        handlers = {
            "dir": self.get_cache_dir,
            "info": self.get_cache_info,
            "list": self.list_cache_items,
            "remove": self.remove_cache_items,
            "purge": self.purge_cache,
        }

        if not options.cache_dir:
            logger.error("pip cache commands can not function since cache is disabled.")
            return ERROR

        # Determine action
        if not args or args[0] not in handlers:
            logger.error(
                "Need an action (%s) to perform.",
                ", ".join(sorted(handlers)),
            )
            return ERROR

        action = args[0]

        # Error handling happens here, not in the action-handlers.
        try:
            handlers[action](options, args[1:])
        except PipError as e:
            logger.error(e.args[0])
            return ERROR

        return SUCCESS

    def get_cache_dir(self, options: Values, args: List[Any]) -> None:
        """
        Log the configured pip cache directory.
        
        Raises:
            CommandError: If any positional arguments are provided (this subcommand accepts none).
        
        Parameters:
            options: Command options; this function logs the value of `options.cache_dir`.
            args: Positional arguments (must be empty).
        """
        if args:
            raise CommandError("Too many arguments")

        logger.info(options.cache_dir)

    def get_cache_info(self, options: Values, args: List[Any]) -> None:
        """
        Log information about pip's HTTP and wheels caches: locations, total sizes, and item counts.
        
        Detailed behavior:
        - Requires no positional arguments; if any are provided a CommandError is raised.
        - Reads cache directory locations from `options.cache_dir` and inspects the `http-v2`, `http`, and `wheels` subdirectories.
        - Computes the total size of the HTTP caches (new and old), the size of the wheels cache, and the counts of HTTP files and locally built wheels.
        - Emits a multi-line informational message with the computed locations, sizes, and counts via the module logger.
        """
        if args:
            raise CommandError("Too many arguments")

        num_http_files = len(self._find_http_files(options))
        num_packages = len(self._find_wheels(options, "*"))

        http_cache_location = self._cache_dir(options, "http-v2")
        old_http_cache_location = self._cache_dir(options, "http")
        wheels_cache_location = self._cache_dir(options, "wheels")
        http_cache_size = filesystem.format_size(
            filesystem.directory_size(http_cache_location)
            + filesystem.directory_size(old_http_cache_location)
        )
        wheels_cache_size = filesystem.format_directory_size(wheels_cache_location)

        message = (
            textwrap.dedent(
                """
                    Package index page cache location (pip v23.3+): {http_cache_location}
                    Package index page cache location (older pips): {old_http_cache_location}
                    Package index page cache size: {http_cache_size}
                    Number of HTTP files: {num_http_files}
                    Locally built wheels location: {wheels_cache_location}
                    Locally built wheels size: {wheels_cache_size}
                    Number of locally built wheels: {package_count}
                """  # noqa: E501
            )
            .format(
                http_cache_location=http_cache_location,
                old_http_cache_location=old_http_cache_location,
                http_cache_size=http_cache_size,
                num_http_files=num_http_files,
                wheels_cache_location=wheels_cache_location,
                package_count=num_packages,
                wheels_cache_size=wheels_cache_size,
            )
            .strip()
        )

        logger.info(message)

    def list_cache_items(self, options: Values, args: List[Any]) -> None:
        """
        List cached wheel files matching an optional pattern and print them using the configured format.
        
        If a single positional argument is provided it is used as the glob pattern to match wheel filenames; otherwise the default pattern "*" is used. The output format is controlled by options.list_format: "human" produces a human-readable summary via format_for_human, any other value uses absolute paths via format_for_abspath.
        
        Raises:
            CommandError: If more than one positional argument is supplied.
        """
        if len(args) > 1:
            raise CommandError("Too many arguments")

        if args:
            pattern = args[0]
        else:
            pattern = "*"

        files = self._find_wheels(options, pattern)
        if options.list_format == "human":
            self.format_for_human(files)
        else:
            self.format_for_abspath(files)

    def format_for_human(self, files: List[str]) -> None:
        """
        Log a human-readable listing of wheel cache files with their sizes.
        
        Given a list of file paths to cached wheels, this formats each entry as
        "<wheel-filename> (<human-readable size>)", sorts the entries, and logs a
        header and the list. If the list is empty, logs "No locally built wheels cached."
        
        Parameters:
            files (List[str]): Paths to wheel files in the cache.
        """
        if not files:
            logger.info("No locally built wheels cached.")
            return

        results = []
        for filename in files:
            wheel = os.path.basename(filename)
            size = filesystem.format_file_size(filename)
            results.append(f" - {wheel} ({size})")
        logger.info("Cache contents:\n")
        logger.info("\n".join(sorted(results)))

    def format_for_abspath(self, files: List[str]) -> None:
        """
        Log the provided wheel file paths as absolute paths, one per line.
        
        If `files` is non-empty, writes the sorted list of paths to the logger (each on its own line). If `files` is empty, nothing is logged.
        
        Parameters:
            files (List[str]): Iterable of absolute file paths to log.
        """
        if files:
            logger.info("\n".join(sorted(files)))

    def remove_cache_items(self, options: Values, args: List[Any]) -> None:
        """
        Remove cached wheel files matching a pattern (and HTTP cache files when pattern is "*").
        
        Given a single-pattern argument in args, finds matching wheel files in the wheels cache and deletes them. If the pattern is "*", HTTP cache files are included as well. Logs a warning when no files match and an info message with the count of removed files.
        
        Raises:
            CommandError: If more than one argument is provided or if no pattern is given.
        """
        if len(args) > 1:
            raise CommandError("Too many arguments")

        if not args:
            raise CommandError("Please provide a pattern")

        files = self._find_wheels(options, args[0])

        no_matching_msg = "No matching packages"
        if args[0] == "*":
            # Only fetch http files if no specific pattern given
            files += self._find_http_files(options)
        else:
            # Add the pattern to the log message
            no_matching_msg += f' for pattern "{args[0]}"'

        if not files:
            logger.warning(no_matching_msg)

        for filename in files:
            os.unlink(filename)
            logger.verbose("Removed %s", filename)
        logger.info("Files removed: %s", len(files))

    def purge_cache(self, options: Values, args: List[Any]) -> None:
        """
        Purge all cache entries.
        
        Calls remove_cache_items with the "*" pattern to delete all cached wheels and HTTP cache files.
        
        Parameters:
            options (Values): Command options (must provide cache_dir and list_format as used by helpers).
            args (List[Any]): Must be empty; if not, a CommandError is raised.
        
        Raises:
            CommandError: If any positional arguments are provided.
        """
        if args:
            raise CommandError("Too many arguments")

        return self.remove_cache_items(options, ["*"])

    def _cache_dir(self, options: Values, subdir: str) -> str:
        """
        Return the path to a sub-directory inside the configured cache directory.
        
        Parameters:
            options: An options object with a `cache_dir` attribute (the base cache directory).
            subdir (str): Subdirectory name to join onto `options.cache_dir`.
        
        Returns:
            str: The joined filesystem path for the cache subdirectory.
        """
        return os.path.join(options.cache_dir, subdir)

    def _find_http_files(self, options: Values) -> List[str]:
        """
        Return a list of files stored in the HTTP caches (both legacy and v2).
        
        Searches the cache subdirectories "http" (legacy) and "http-v2" under options.cache_dir and returns the concatenation of files found in both locations.
        
        Parameters:
            options (Values): Command options carrying the configured `cache_dir`.
        
        Returns:
            List[str]: File paths found in the legacy and v2 HTTP cache directories (order: legacy then v2).
        """
        old_http_dir = self._cache_dir(options, "http")
        new_http_dir = self._cache_dir(options, "http-v2")
        return filesystem.find_files(old_http_dir, "*") + filesystem.find_files(
            new_http_dir, "*"
        )

    def _find_wheels(self, options: Values, pattern: str) -> List[str]:
        """
        Return the list of wheel files in the wheels cache matching the given pattern.
        
        If `pattern` contains a hyphen ('-') it is treated as including at least the version part of a PEP 427 wheel filename, so the function appends `*.whl` to match the remainder; otherwise it appends `-*.whl` to match the hyphen that precedes the version (i.e., pattern is treated as a distribution name). The function searches the cache's "wheels" subdirectory and returns the matching file paths.
        
        Parameters:
            pattern (str): A glob-like pattern for wheel matching (distribution name or name-version).
        
        Returns:
            List[str]: Paths of matching wheel files in the wheels cache.
        """
        wheel_dir = self._cache_dir(options, "wheels")

        # The wheel filename format, as specified in PEP 427, is:
        #     {distribution}-{version}(-{build})?-{python}-{abi}-{platform}.whl
        #
        # Additionally, non-alphanumeric values in the distribution are
        # normalized to underscores (_), meaning hyphens can never occur
        # before `-{version}`.
        #
        # Given that information:
        # - If the pattern we're given contains a hyphen (-), the user is
        #   providing at least the version. Thus, we can just append `*.whl`
        #   to match the rest of it.
        # - If the pattern we're given doesn't contain a hyphen (-), the
        #   user is only providing the name. Thus, we append `-*.whl` to
        #   match the hyphen before the version, followed by anything else.
        #
        # PEP 427: https://www.python.org/dev/peps/pep-0427/
        pattern = pattern + ("*.whl" if "-" in pattern else "-*.whl")

        return filesystem.find_files(wheel_dir, pattern)
