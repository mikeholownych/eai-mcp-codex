import contextlib
import functools
import os
import sys
from typing import TYPE_CHECKING, List, Optional, Type, cast

from pip._internal.utils.misc import strtobool

from .base import BaseDistribution, BaseEnvironment, FilesystemWheel, MemoryWheel, Wheel

if TYPE_CHECKING:
    from typing import Literal, Protocol
else:
    Protocol = object

__all__ = [
    "BaseDistribution",
    "BaseEnvironment",
    "FilesystemWheel",
    "MemoryWheel",
    "Wheel",
    "get_default_environment",
    "get_environment",
    "get_wheel_distribution",
    "select_backend",
]


def _should_use_importlib_metadata() -> bool:
    """
    Decide whether to use the importlib.metadata backend or the pkg_resources backend.
    
    Returns True to use importlib.metadata, False to use pkg_resources. Decision order:
    1. If the environment variable `_PIP_USE_IMPORTLIB_METADATA` is set, its boolean
       value (parsed with `strtobool`) determines the result.
    2. Otherwise, on Python versions below 3.11, return False (use pkg_resources).
    3. On Python 3.11 and later, consult `importlib.metadata._PIP_USE_IMPORTLIB_METADATA`
       if present; otherwise default to True (use importlib.metadata).
    """
    with contextlib.suppress(KeyError, ValueError):
        return bool(strtobool(os.environ["_PIP_USE_IMPORTLIB_METADATA"]))
    if sys.version_info < (3, 11):
        return False
    import importlib.metadata

    return bool(getattr(importlib.metadata, "_PIP_USE_IMPORTLIB_METADATA", True))


class Backend(Protocol):
    NAME: 'Literal["importlib", "pkg_resources"]'
    Distribution: Type[BaseDistribution]
    Environment: Type[BaseEnvironment]


@functools.lru_cache(maxsize=None)
def select_backend() -> Backend:
    """
    Select and return the active metadata backend module.
    
    Returns the backend module that implements the Backend protocol (either the importlib-based or pkg_resources-based backend), chosen according to _should_use_importlib_metadata(). The chosen module is imported lazily and returned as a Backend.
    """
    if _should_use_importlib_metadata():
        from . import importlib

        return cast(Backend, importlib)
    from . import pkg_resources

    return cast(Backend, pkg_resources)


def get_default_environment() -> BaseEnvironment:
    """
    Return a BaseEnvironment representing the current process import environment.
    
    Uses the selected metadata backend to construct an Environment from the current
    process import paths (sys.path). The returned object implements BaseEnvironment
    and represents the default environment for metadata lookups and distribution
    resolution.
    
    Returns:
        BaseEnvironment: The default environment instance for the current process.
    """
    return select_backend().Environment.default()


def get_environment(paths: Optional[List[str]]) -> BaseEnvironment:
    """
    Return an Environment representation built from the given import paths.
    
    Parameters:
        paths (Optional[List[str]]): Sequence of import paths to use when constructing
            the environment. If None, the environment for the current process is used.
    
    Returns:
        BaseEnvironment: An environment instance representing installed distributions
        visible on the provided paths.
    """
    return select_backend().Environment.from_paths(paths)


def get_directory_distribution(directory: str) -> BaseDistribution:
    """
    Return a BaseDistribution representing the distribution metadata found in the given on-disk `.dist-info` directory.
    
    Parameters:
        directory (str): Path to the `.dist-info` directory for the distribution.
    
    Returns:
        BaseDistribution: A backend-specific Distribution instance wrapping the metadata in `directory`.
    """
    return select_backend().Distribution.from_directory(directory)


def get_wheel_distribution(wheel: Wheel, canonical_name: str) -> BaseDistribution:
    """
    Return a Distribution representing the given wheel's metadata.
    
    Given a Wheel (e.g., FilesystemWheel or MemoryWheel), load the distribution
    metadata from its `.dist-info` directory using the currently selected backend.
    
    Parameters:
        wheel: The wheel object whose `.dist-info` contents will be read.
        canonical_name: The normalized (PEP 503/625-style) project name for the wheel;
            used by the backend when constructing the Distribution.
    
    Returns:
        A BaseDistribution instance representing the wheel's metadata as provided
        by the active backend.
    """
    return select_backend().Distribution.from_wheel(wheel, canonical_name)


def get_metadata_distribution(
    metadata_contents: bytes,
    filename: str,
    canonical_name: str,
) -> BaseDistribution:
    """
    Create a BaseDistribution from raw METADATA contents using the selected backend.
    
    Constructs a distribution representation by delegating to the active backend's
    Distribution.from_metadata_file_contents implementation.
    
    Parameters:
        metadata_contents (bytes): Raw contents of a METADATA file (e.g., from a .dist-info
            directory or provided via PEP 658).
        filename (str): The filename to associate with this metadata (typically the
            METADATA file name within the distribution).
        canonical_name (str): The normalized project name for the distribution.
    
    Returns:
        BaseDistribution: A distribution metadata object provided by the selected backend.
    """
    return select_backend().Distribution.from_metadata_file_contents(
        metadata_contents,
        filename,
        canonical_name,
    )
