import importlib.metadata
from typing import Any, Optional, Protocol, cast


class BadMetadata(ValueError):
    def __init__(self, dist: importlib.metadata.Distribution, *, reason: str) -> None:
        """
        Initialize a BadMetadata error for a distribution.
        
        Parameters:
            dist (importlib.metadata.Distribution): The distribution whose metadata is invalid.
            reason (str): Short explanation of why the metadata is considered bad; used in the exception's string representation.
        """
        self.dist = dist
        self.reason = reason

    def __str__(self) -> str:
        """
        Return a human-readable message for this BadMetadata exception.
        
        The message includes the associated Distribution object and the reason the
        metadata is considered bad, formatted as: "Bad metadata in {dist} ({reason})".
        
        Returns:
            str: The formatted exception message.
        """
        return f"Bad metadata in {self.dist} ({self.reason})"


class BasePath(Protocol):
    """A protocol that various path objects conform.

    This exists because importlib.metadata uses both ``pathlib.Path`` and
    ``zipfile.Path``, and we need a common base for type hints (Union does not
    work well since ``zipfile.Path`` is too new for our linter setup).

    This does not mean to be exhaustive, but only contains things that present
    in both classes *that we need*.
    """

    @property
    def name(self) -> str:
        """
        The final path component (basename) of this path-like object.
        
        Returns:
            str: The name of the file or directory represented by this path.
        """
        raise NotImplementedError()

    @property
    def parent(self) -> "BasePath":
        """
        Return the parent path.
        
        The parent is a BasePath representing the directory that directly contains this path.
        Returns:
            BasePath: The parent path.
        """
        raise NotImplementedError()


def get_info_location(d: importlib.metadata.Distribution) -> Optional[BasePath]:
    """
    Return the distribution's metadata directory path, or None if unavailable.
    
    The function retrieves the Distribution object's internal `_path` attribute and returns it as a BasePath when present. Returns None for distributions that do not have an on-disk metadata location.
    """
    return getattr(d, "_path", None)


def get_dist_name(dist: importlib.metadata.Distribution) -> str:
    """
    Return the distribution's project name as a string.
    
    Retrieves the `name` attribute from the given Distribution and validates that
    it is a str. Raises BadMetadata if the metadata entry for `name` is missing
    or not a string.
    """
    name = cast(Any, dist).name
    if not isinstance(name, str):
        raise BadMetadata(dist, reason="invalid metadata entry 'name'")
    return name
