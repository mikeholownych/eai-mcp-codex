"""xmlrpclib.Transport implementation
"""

import logging
import urllib.parse
import xmlrpc.client
from typing import TYPE_CHECKING, Tuple

from pip._internal.exceptions import NetworkConnectionError
from pip._internal.network.session import PipSession
from pip._internal.network.utils import raise_for_status

if TYPE_CHECKING:
    from xmlrpc.client import _HostType, _Marshallable

    from _typeshed import SizedBuffer

logger = logging.getLogger(__name__)


class PipXmlrpcTransport(xmlrpc.client.Transport):
    """Provide a `xmlrpclib.Transport` implementation via a `PipSession`
    object.
    """

    def __init__(
        self, index_url: str, session: PipSession, use_datetime: bool = False
    ) -> None:
        """
        Initialize the transport.
        
        Parameters:
            index_url (str): Base index URL; its scheme (http/https) is extracted and used when building request URLs.
            use_datetime (bool): Passed to the base Transport to control whether xmlrpc datetime objects are used.
        """
        super().__init__(use_datetime)
        index_parts = urllib.parse.urlparse(index_url)
        self._scheme = index_parts.scheme
        self._session = session

    def request(
        self,
        host: "_HostType",
        handler: str,
        request_body: "SizedBuffer",
        verbose: bool = False,
    ) -> Tuple["_Marshallable", ...]:
        """
        Send an XML-RPC request to the given host/handler and return the parsed response tuple.
        
        Constructs a URL using the transport's configured scheme, posts the provided XML request body
        with Content-Type "text/xml" via the stored PipSession, enforces an HTTP-success status,
        sets the transport's verbose flag, and returns the parsed XML-RPC response.
        
        Parameters:
            host: Hostname (and optional port) component to target; must be a string.
            handler: Path component (RPC handler) to append to the host in the URL.
            request_body: Byte-buffer containing the XML request payload.
            verbose: If True, enable verbose parsing/logging on the transport for this call.
        
        Returns:
            A tuple of unmarshalled XML-RPC response values.
        
        Raises:
            NetworkConnectionError: Re-raised when the HTTP request fails or returns an error status.
        """
        assert isinstance(host, str)
        parts = (self._scheme, host, handler, None, None, None)
        url = urllib.parse.urlunparse(parts)
        try:
            headers = {"Content-Type": "text/xml"}
            response = self._session.post(
                url,
                data=request_body,
                headers=headers,
                stream=True,
            )
            raise_for_status(response)
            self.verbose = verbose
            return self.parse_response(response.raw)
        except NetworkConnectionError as exc:
            assert exc.response
            logger.critical(
                "HTTP error %s while getting %s",
                exc.response.status_code,
                url,
            )
            raise
