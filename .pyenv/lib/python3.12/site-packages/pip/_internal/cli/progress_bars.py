import functools
from typing import Callable, Generator, Iterable, Iterator, Optional, Tuple

from pip._vendor.rich.progress import (
    BarColumn,
    DownloadColumn,
    FileSizeColumn,
    Progress,
    ProgressColumn,
    SpinnerColumn,
    TextColumn,
    TimeElapsedColumn,
    TimeRemainingColumn,
    TransferSpeedColumn,
)

from pip._internal.utils.logging import get_indentation

DownloadProgressRenderer = Callable[[Iterable[bytes]], Iterator[bytes]]


def _rich_progress_bar(
    iterable: Iterable[bytes],
    *,
    bar_type: str,
    size: int,
) -> Generator[bytes, None, None]:
    """
    Wrap an iterable of byte chunks and render a Rich download progress bar while yielding the chunks.
    
    This generator yields each bytes chunk from `iterable` unchanged while updating a Rich Progress task.
    If `size` is falsy, an indeterminate layout (spinner, file size, speed, elapsed) is used with an infinite total;
    if `size` is truthy, a determinate progress bar is shown with the total set to `size`.
    
    Parameters:
        iterable (Iterable[bytes]): Source of byte chunks to yield.
        bar_type (str): Must be "on". The function asserts this and will raise AssertionError otherwise.
        size (int): Total size in bytes for a determinate progress bar; pass a falsy value (e.g., None or 0)
            to render an indeterminate progress layout.
    
    Returns:
        Generator[bytes, None, None]: An iterator that yields the same byte chunks from `iterable` while updating the progress display.
    """
    assert bar_type == "on", "This should only be used in the default mode."

    if not size:
        total = float("inf")
        columns: Tuple[ProgressColumn, ...] = (
            TextColumn("[progress.description]{task.description}"),
            SpinnerColumn("line", speed=1.5),
            FileSizeColumn(),
            TransferSpeedColumn(),
            TimeElapsedColumn(),
        )
    else:
        total = size
        columns = (
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            DownloadColumn(),
            TransferSpeedColumn(),
            TextColumn("eta"),
            TimeRemainingColumn(),
        )

    progress = Progress(*columns, refresh_per_second=30)
    task_id = progress.add_task(" " * (get_indentation() + 2), total=total)
    with progress:
        for chunk in iterable:
            yield chunk
            progress.update(task_id, advance=len(chunk))


def get_download_progress_renderer(
    *, bar_type: str, size: Optional[int] = None
) -> DownloadProgressRenderer:
    """
    Return a callable that wraps an iterable of bytes to render download progress.
    
    If `bar_type == "on"`, the returned callable is a partial of the internal Rich-based
    renderer and will display a progress bar; `size` (bytes) selects a determinate
    bar when truthy or an indeterminate layout when falsy/None. For any other
    `bar_type` the function returns the built-in `iter` (a no-op wrapper).
    
    Parameters:
        bar_type: Progress bar mode; `"on"` enables the Rich progress renderer.
        size: Optional total size in bytes for a determinate progress bar.
    
    Returns:
        A callable that accepts an Iterable[bytes] and yields the same bytes while
        updating progress.
    """
    if bar_type == "on":
        return functools.partial(_rich_progress_bar, bar_type=bar_type, size=size)
    else:
        return iter  # no-op, when passed an iterator
