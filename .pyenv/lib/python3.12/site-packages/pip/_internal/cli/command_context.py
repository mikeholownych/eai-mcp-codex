from contextlib import ExitStack, contextmanager
from typing import ContextManager, Generator, TypeVar

_T = TypeVar("_T", covariant=True)


class CommandContextMixIn:
    def __init__(self) -> None:
        """
        Initialize the mixin.
        
        Sets up internal state: calls the superclass initializer, creates a new ExitStack for managing a composed "main" context, and sets the `_in_main_context` flag to False.
        """
        super().__init__()
        self._in_main_context = False
        self._main_context = ExitStack()

    @contextmanager
    def main_context(self) -> Generator[None, None, None]:
        """
        Enter a dedicated "main" context that manages nested context managers via the instance's ExitStack.
        
        This context manager:
        - Asserts that a main context is not already active.
        - Marks the main context as active for the duration of the with-block so callers can call `enter_context` to register sub-contexts into the shared ExitStack.
        - Yields control inside the ExitStack; the stack will exit (closing any entered sub-contexts) when the with-block completes.
        - Ensures the active flag is cleared on exit, even if an exception is raised.
        """
        assert not self._in_main_context

        self._in_main_context = True
        try:
            with self._main_context:
                yield
        finally:
            self._in_main_context = False

    def enter_context(self, context_provider: ContextManager[_T]) -> _T:
        """
        Enter the given context manager within the mixin's active main context and return its entered value.
        
        This must be called while inside the mixin's main_context(); it delegates to the internal ExitStack to enter and track the provided context manager so it will be exited when the main context exits.
        
        Parameters:
            context_provider (ContextManager[_T]): A context manager to enter and register with the main context.
        
        Returns:
            _T: The value returned by entering the provided context manager (its `__enter__` result).
        
        Raises:
            AssertionError: If called when the main context is not active.
        """
        assert self._in_main_context

        return self._main_context.enter_context(context_provider)
