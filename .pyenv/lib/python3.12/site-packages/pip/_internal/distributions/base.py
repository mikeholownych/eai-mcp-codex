import abc
from typing import Optional

from pip._internal.index.package_finder import PackageFinder
from pip._internal.metadata.base import BaseDistribution
from pip._internal.req import InstallRequirement


class AbstractDistribution(metaclass=abc.ABCMeta):
    """A base class for handling installable artifacts.

    The requirements for anything installable are as follows:

     - we must be able to determine the requirement name
       (or we can't correctly handle the non-upgrade case).

     - for packages with setup requirements, we must also be able
       to determine their requirements without installing additional
       packages (for the same reason as run-time dependencies)

     - we must be able to create a Distribution object exposing the
       above metadata.

     - if we need to do work in the build tracker, we must be able to generate a unique
       string to identify the requirement in the build tracker.
    """

    def __init__(self, req: InstallRequirement) -> None:
        """
        Initialize the AbstractDistribution with the given install requirement.
        
        Parameters:
            req (InstallRequirement): The requirement this distribution represents. Stored on
                self.req for use by subclasses when preparing or exposing distribution metadata.
        """
        super().__init__()
        self.req = req

    @abc.abstractproperty
    def build_tracker_id(self) -> Optional[str]:
        """A string that uniquely identifies this requirement to the build tracker.

        If None, then this dist has no work to do in the build tracker, and
        ``.prepare_distribution_metadata()`` will not be called."""
        raise NotImplementedError()

    @abc.abstractmethod
    def get_metadata_distribution(self) -> BaseDistribution:
        """
        Return a BaseDistribution exposing this requirement's metadata.
        
        Implementations must return a BaseDistribution that provides the distribution metadata (name, version, metadata files, dependency information, etc.) for the InstallRequirement held by this object. This is used by downstream packaging and metadata inspection code to read package metadata without performing installation.
        
        Returns:
            BaseDistribution: an object representing the distribution's metadata.
        """
        raise NotImplementedError()

    @abc.abstractmethod
    def prepare_distribution_metadata(
        self,
        finder: PackageFinder,
        build_isolation: bool,
        check_build_deps: bool,
    ) -> None:
        """
        Prepare distribution metadata for this install requirement.
        
        Populate whatever metadata is necessary so that get_metadata_distribution() can
        return a BaseDistribution representing this requirement. This may involve
        downloading source or wheel archives, running build isolation, and/or invoking
        setup/build tools; implementations should perform any work required to expose
        packaging metadata without performing a full installation.
        
        Parameters:
            build_isolation (bool): If True, perform build actions in isolation (e.g.,
                using an isolated build environment); if False, use the current
                environment.
            check_build_deps (bool): If True, ensure and install build-time dependencies
                before building metadata; if False, assume build dependencies are
                satisfied.
        
        Notes:
            - A PackageFinder instance is provided to the implementation (as the
              `finder` parameter) for locating distributions; do not document it here as
              it is a shared service.
            - If this object's `build_tracker_id` is None, this method will not be
              called.
        """
        raise NotImplementedError()
