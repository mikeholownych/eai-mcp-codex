"""Execute exactly this copy of pip, within a different environment.

This file is named as it is, to ensure that this module can't be imported via
an import statement.
"""

# /!\ This version compatibility check section must be Python 2 compatible. /!\

import sys

# Copied from setup.py
PYTHON_REQUIRES = (3, 7)


def version_str(version):  # type: ignore
    """
    Return a dotted string representation of a version tuple.
    
    Converts a sequence (typically a tuple) of integers representing a version,
    e.g. (3, 7), into a dot-separated string "3.7".
    
    Parameters:
        version (Iterable[int]): Version components in order (major, minor, ...).
    
    Returns:
        str: Dot-separated version string (e.g. "3.7.2").
    """
    return ".".join(str(v) for v in version)


if sys.version_info[:2] < PYTHON_REQUIRES:
    raise SystemExit(
        "This version of pip does not support python {} (requires >={}).".format(
            version_str(sys.version_info[:2]), version_str(PYTHON_REQUIRES)
        )
    )

# From here on, we can use Python 3 features, but the syntax must remain
# Python 2 compatible.

import runpy  # noqa: E402
from importlib.machinery import PathFinder  # noqa: E402
from os.path import dirname  # noqa: E402

PIP_SOURCES_ROOT = dirname(dirname(__file__))


class PipImportRedirectingFinder:
    @classmethod
    def find_spec(self, fullname, path=None, target=None):  # type: ignore
        """
        Find or redirect the import spec for the top-level "pip" module to the bundled pip sources.
        
        If `fullname` is not "pip", this finder does not handle the import and returns None. For "pip", it delegates to importlib.machinery.PathFinder.find_spec using PIP_SOURCES_ROOT as the search location and returns the resulting module spec.
        
        Parameters:
            fullname (str): Fully qualified module name being imported; only "pip" is handled.
            path (Optional[list]): Import path passed by the import machinery (ignored).
            target (Optional[ModuleType]): Optional target module for importlib (forwarded to PathFinder).
        
        Returns:
            importlib.machinery.ModuleSpec | None: The found ModuleSpec for "pip", or None if not handled.
        
        Raises:
            AssertionError: If `fullname == "pip"` but no spec is found for the bundled sources.
        """
        if fullname != "pip":
            return None

        spec = PathFinder.find_spec(fullname, [PIP_SOURCES_ROOT], target)
        assert spec, (PIP_SOURCES_ROOT, fullname)
        return spec


sys.meta_path.insert(0, PipImportRedirectingFinder())

assert __name__ == "__main__", "Cannot run __pip-runner__.py as a non-main module"
runpy.run_module("pip", run_name="__main__", alter_sys=True)
