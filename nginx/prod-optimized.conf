user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    worker_aio_requests 32;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    log_format performance '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" rt=$request_time '
                          'uct="$upstream_connect_time" uht="$upstream_header_time" '
                          'urt="$upstream_response_time" cs=$upstream_cache_status';
    
    access_log /var/log/nginx/access.log performance buffer=16k flush=5s;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 50M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # HTTP/2 configuration
    http2_max_field_size 16k;
    http2_max_header_size 32k;
    
    # Compression settings
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;
    
    # Brotli compression (if module available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf application/xml application/xhtml+xml text/javascript application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=frontend:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=assets:10m rate=200r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;
    
    # Caching configuration
    proxy_cache_path /var/cache/nginx/frontend 
                     levels=1:2 
                     keys_zone=frontend_cache:100m 
                     max_size=1g 
                     inactive=60m 
                     use_temp_path=off;
    
    proxy_cache_path /var/cache/nginx/api 
                     levels=1:2 
                     keys_zone=api_cache:50m 
                     max_size=500m 
                     inactive=30m 
                     use_temp_path=off;
    
    # Upstream configurations
    upstream plan_management {
        least_conn;
        server plan-management:8002 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    upstream git_worktree {
        least_conn;
        server git-worktree-manager:8003 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    upstream workflow_orchestrator {
        least_conn;
        server workflow-orchestrator:8004 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    upstream staff_service {
        least_conn;
        server staff-service:8006 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    upstream frontend {
        least_conn;
        server 192.168.2.185:4000 max_fails=3 fail_timeout=30s weight=1;
        keepalive 64;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }
    
    upstream staff_frontend {
        least_conn;
        server staff-frontend:3001 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # Performance monitoring endpoints
    server {
        listen 8080;
        server_name localhost;
        
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Main server block
    server {
        listen 80 http2;  # Enable HTTP/2
        listen [::]:80 http2;
        server_name localhost _;
        
        # Connection limits
        limit_conn perip 20;
        limit_conn perserver 1000;
        
        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","gateway":"nginx","timestamp":"$time_iso8601","cache_status":"$upstream_cache_status"}';
            add_header Content-Type application/json;
        }
        
        # Performance metrics endpoint
        location /metrics {
            access_log off;
            return 200 'nginx_connections_active{server="$server_name"} $connections_active
nginx_connections_reading{server="$server_name"} $connections_reading
nginx_connections_writing{server="$server_name"} $connections_writing
nginx_connections_waiting{server="$server_name"} $connections_waiting
nginx_http_requests_total{server="$server_name"} $request_id
nginx_http_request_duration_seconds{server="$server_name"} $request_time';
            add_header Content-Type text/plain;
        }
        
        # Static assets with aggressive caching
        location ~* ^/_next/static/.*\.(js|css|woff|woff2|ttf|eot|svg|png|jpg|jpeg|gif|ico|webp|avif)$ {
            limit_req zone=assets burst=50 nodelay;
            proxy_pass http://frontend;
            proxy_cache frontend_cache;
            proxy_cache_valid 200 304 1y;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;
            
            # Optimal headers for static assets
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Vary "Accept-Encoding" always;
            add_header X-Cache-Status $upstream_cache_status always;
            
            # CORS headers for fonts
            if ($request_filename ~* \.(woff|woff2|ttf|eot)$) {
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
            }
            
            expires 1y;
            etag on;
            
            # Proxy settings
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Font files with CORS
        location ~* \.(woff|woff2|ttf|eot|otf)$ {
            limit_req zone=assets burst=20 nodelay;
            proxy_pass http://frontend;
            proxy_cache frontend_cache;
            proxy_cache_valid 200 1y;
            proxy_cache_use_stale error timeout updating;
            
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
            add_header X-Cache-Status $upstream_cache_status always;
            
            expires 1y;
        }
        
        # API endpoints with intelligent caching
        location /api/plans/ {
            limit_req zone=api burst=30 nodelay;
            rewrite ^/api/plans/(.*) /$1 break;
            proxy_pass http://plan_management;
            
            # Conditional caching for GET requests
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            
            add_header X-Cache-Status $upstream_cache_status always;
            
            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Connection pooling
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # Git Worktree endpoints
        location /api/git/ {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/api/git/(.*) /$1 break;
            proxy_pass http://git_worktree;
            
            # No caching for git operations
            proxy_cache off;
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 15s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # Workflow Orchestrator endpoints
        location /api/workflows/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/api/workflows/(.*) /$1 break;
            proxy_pass http://workflow_orchestrator;
            
            proxy_cache off;
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # Staff Management endpoints
        location /api/staff/ {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/api/staff/(.*) /staff/$1 break;
            proxy_pass http://staff_service;
            
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 2m;
            proxy_cache_key "$scheme$request_method$host$request_uri$http_authorization";
            
            add_header X-Cache-Status $upstream_cache_status always;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # WebSocket connections
        location /ws {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }
        
        # Favicon with long caching
        location = /favicon.ico {
            proxy_pass http://frontend;
            proxy_cache frontend_cache;
            proxy_cache_valid 200 1d;
            expires 1d;
            add_header Cache-Control "public, max-age=86400" always;
            access_log off;
        }
        
        # robots.txt
        location = /robots.txt {
            proxy_pass http://frontend;
            proxy_cache frontend_cache;
            proxy_cache_valid 200 1h;
            expires 1h;
            add_header Cache-Control "public, max-age=3600" always;
        }
        
        # Service worker with appropriate caching
        location = /sw.js {
            proxy_pass http://frontend;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }
        
        # Main frontend application
        location / {
            limit_req zone=frontend burst=100 nodelay;
            proxy_pass http://frontend;
            
            # Cache HTML for short periods
            proxy_cache frontend_cache;
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_key "$scheme$request_method$host$request_uri$http_accept$http_accept_encoding";
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            
            # Cache bypass for POST/PUT/DELETE
            proxy_cache_methods GET HEAD;
            
            add_header X-Cache-Status $upstream_cache_status always;
            
            # Optimal proxy settings
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Fallback for unavailable frontend
            error_page 502 503 504 = @fallback;
        }
        
        location @fallback {
            return 200 '{"message": "MCP API Gateway", "status": "partial", "available_endpoints": ["/api/plans/", "/api/git/", "/api/workflows/", "/api/staff/", "/health", "/metrics"], "timestamp": "$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Error pages
        error_page 404 /404.json;
        error_page 500 502 503 504 /50x.json;
        
        location = /404.json {
            internal;
            return 404 '{"error": "Not Found", "code": 404, "message": "The requested resource was not found", "timestamp": "$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.json {
            internal;
            return 500 '{"error": "Internal Server Error", "code": 500, "message": "Something went wrong on our end", "timestamp": "$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }
    
    # Staff Frontend Server Block (optimized)
    server {
        listen 80 http2;
        listen [::]:80 http2;
        server_name staff.ethical-ai-insider.com staff-frontend localhost:3001;
        
        # Connection limits
        limit_conn perip 10;
        limit_conn perserver 500;
        
        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        location /health {
            access_log off;
            return 200 '{"status":"healthy","gateway":"staff-nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        location /api/staff/ {
            limit_req zone=api burst=15 nodelay;
            rewrite ^/api/staff/(.*) /staff/$1 break;
            proxy_pass http://staff_service;
            
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 1m;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        location / {
            limit_req zone=frontend burst=50 nodelay;
            proxy_pass http://staff_frontend;
            
            proxy_cache frontend_cache;
            proxy_cache_valid 200 2m;
            proxy_cache_use_stale error timeout updating;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            error_page 502 503 504 = @staff_fallback;
        }
        
        location @staff_fallback {
            return 200 '{"message": "Staff Portal", "status": "unavailable", "staff_endpoints": ["/api/staff/"], "timestamp": "$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }
}