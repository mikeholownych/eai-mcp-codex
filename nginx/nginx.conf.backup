# nginx/nginx.conf - Enhanced API Gateway Configuration
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Enhanced logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=model:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=workflow:5m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=git:5m rate=3r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;
    
    # Frontend application upstream
    upstream frontend {
        least_conn;
        server frontend:3000 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
    }
    
    # Staff Frontend application upstream
    upstream staff_frontend {
        least_conn;
        server staff-frontend:3001 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
    }
    
    # Upstream service definitions with load balancing
    upstream model_router {
        least_conn;
        server model-router:8001 max_fails=3 fail_timeout=30s weight=1;
        # Add more instances when scaling
        # server model-router-2:8001 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
    }
    
    upstream plan_management {
        least_conn;
        server plan-management:8002 max_fails=3 fail_timeout=30s weight=1;
        # server plan-management-2:8002 max_fails=3 fail_timeout=30s weight=1;
        keepalive 16;
    }
    
    upstream git_worktree {
        least_conn;
        server git-worktree-manager:8003 max_fails=3 fail_timeout=30s weight=1;
        # server git-worktree-manager-2:8003 max_fails=3 fail_timeout=30s weight=1;
        keepalive 8;
    }
    
    upstream workflow_orchestrator {
        least_conn;
        server workflow-orchestrator:8004 max_fails=3 fail_timeout=30s weight=1;
        # server workflow-orchestrator-2:8004 max_fails=3 fail_timeout=30s weight=1;
        keepalive 16;
    }
    
    upstream verification_feedback {
        least_conn;
        server verification-feedback:8005 max_fails=3 fail_timeout=30s weight=1;
        # server verification-feedback-2:8005 max_fails=3 fail_timeout=30s weight=1;
        keepalive 16;
    }
    
    upstream staff_service {
        least_conn;
        server staff-service:8006 max_fails=3 fail_timeout=30s weight=1;
        # server staff-service-2:8006 max_fails=3 fail_timeout=30s weight=1;
        keepalive 8;
    }
    
    # Agent framework services (commented out as they're not running)
    # upstream a2a_communication {
    #     least_conn;
    #     server a2a-communication:8010 max_fails=3 fail_timeout=30s weight=1;
    #     keepalive 8;
    # }
    
    # upstream agent_pool {
    #     least_conn;
    #     server agent-pool:8011 max_fails=3 fail_timeout=30s weight=1;
    #     keepalive 8;
    # }
    
    # upstream collaboration_orchestrator {
    #     least_conn;
    #     server collaboration-orchestrator:8012 max_fails=3 fail_timeout=30s weight=1;
    #     keepalive 8;
    # }
    
    # Specialized agents (commented out as they're not running)
    # upstream planner_agent {
    #     least_conn;
    #     server planner-agent:8013 max_fails=3 fail_timeout=30s weight=1;
    #     keepalive 4;
    # }
    
    # upstream security_agent {
    #     least_conn;
    #     server security-agent:8014 max_fails=3 fail_timeout=30s weight=1;
    #     keepalive 4;
    # }
    
    # upstream developer_agent {
    #     least_conn;
    #     server developer-agent:8015 max_fails=3 fail_timeout=30s weight=1;
    #     keepalive 4;
    # }
    
    # upstream agent_monitor {
    #     least_conn;
    #     server agent-monitor:8016 max_fails=3 fail_timeout=30s weight=1;
    #     keepalive 4;
    # }
    
    # Main server configuration
    server {
        listen 80;
        listen [::]:80;
        server_name localhost _;
        
        # Connection limits  
        limit_conn perip 10;
        limit_conn perserver 100;
        
        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy strict-origin-when-cross-origin always;
        add_header X-Gateway "MCP-Agent-Network" always;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","gateway":"nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # === CORE MICROSERVICES ===
        
        # Model Router endpoints
        location /api/model/ {
            limit_req zone=model burst=30 nodelay;
            rewrite ^/api/model/(.*) /$1 break;
            proxy_pass http://model_router;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # Plan Management endpoints  
        location /api/plans/ {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/api/plans/(.*) /$1 break;
            proxy_pass http://plan_management;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # Git Worktree endpoints
        location /api/git/ {
            limit_req zone=git burst=10 nodelay;
            rewrite ^/api/git/(.*) /$1 break;
            proxy_pass http://git_worktree;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # Workflow Orchestrator endpoints
        location /api/workflows/ {
            limit_req zone=workflow burst=5 nodelay;
            rewrite ^/api/workflows/(.*) /$1 break;
            proxy_pass http://workflow_orchestrator;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # Verification & Feedback endpoints
        location /api/feedback/ {
            limit_req zone=api burst=15 nodelay;
            rewrite ^/api/feedback/(.*) /$1 break;
            proxy_pass http://verification_feedback;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # Staff Management endpoints
        location /api/staff/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/api/staff/(.*) /staff/$1 break;
            proxy_pass http://staff_service;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # === AGENT FRAMEWORK SERVICES (commented out - services not running) ===
        
        # A2A Communication Hub
        # location /api/a2a/ {
        #     limit_req zone=api burst=20 nodelay;
        #     rewrite ^/api/a2a/(.*) /$1 break;
        #     proxy_pass http://a2a_communication;
        #     include /etc/nginx/conf.d/proxy_headers.conf;
        #     
        #     # WebSocket support for real-time communication
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "upgrade";
        # }
        
        # Agent Pool Manager
        # location /api/agents/ {
        #     limit_req zone=api burst=15 nodelay;
        #     rewrite ^/api/agents/(.*) /$1 break;
        #     proxy_pass http://agent_pool;
        #     include /etc/nginx/conf.d/proxy_headers.conf;
        # }
        
        # Collaboration Orchestrator
        # location /api/collaboration/ {
        #     limit_req zone=api burst=10 nodelay;
        #     rewrite ^/api/collaboration/(.*) /$1 break;
        #     proxy_pass http://collaboration_orchestrator;
        #     include /etc/nginx/conf.d/proxy_headers.conf;
        # }
        
        # === SPECIALIZED AGENTS (commented out - services not running) ===
        
        # Planner Agent
        # location /api/planner/ {
        #     limit_req zone=api burst=10 nodelay;
        #     rewrite ^/api/planner/(.*) /$1 break;
        #     proxy_pass http://planner_agent;
        #     include /etc/nginx/conf.d/proxy_headers.conf;
        # }
        
        # Security Agent
        # location /api/security/ {
        #     limit_req zone=api burst=5 nodelay;
        #     rewrite ^/api/security/(.*) /$1 break;
        #     proxy_pass http://security_agent;
        #     include /etc/nginx/conf.d/proxy_headers.conf;
        # }
        
        # Developer Agent
        # location /api/developer/ {
        #     limit_req zone=api burst=10 nodelay;
        #     rewrite ^/api/developer/(.*) /$1 break;
        #     proxy_pass http://developer_agent;
        #     include /etc/nginx/conf.d/proxy_headers.conf;
        # }
        
        # Agent Monitor
        # location /api/monitor/ {
        #     limit_req zone=api burst=20 nodelay;
        #     rewrite ^/api/monitor/(.*) /$1 break;
        #     proxy_pass http://agent_monitor;
        #     include /etc/nginx/conf.d/proxy_headers.conf;
        # }
        
        # === LEGACY ENDPOINTS (for backward compatibility) ===
        
        # Direct service access (legacy)
        location ~ ^/(model-router|plan-management|git-worktree|workflow-orchestrator|verification-feedback)/ {
            limit_req zone=api burst=20 nodelay;
            
            set $service_name $1;
            set $upstream_name "";
            
            if ($service_name = "model-router") {
                set $upstream_name "model_router";
            }
            if ($service_name = "plan-management") {
                set $upstream_name "plan_management";
            }
            if ($service_name = "git-worktree") {
                set $upstream_name "git_worktree";
            }
            if ($service_name = "workflow-orchestrator") {
                set $upstream_name "workflow_orchestrator";
            }
            if ($service_name = "verification-feedback") {
                set $upstream_name "verification_feedback";
            }
            
            rewrite ^/[^/]+/(.*) /$1 break;
            proxy_pass http://$upstream_name;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # === MONITORING & METRICS ===
        
        # Metrics endpoint (for Prometheus)
        location /metrics {
            proxy_pass http://workflow_orchestrator/metrics;
            allow 172.50.0.0/16;  # Docker network
            allow 127.0.0.1;      # Localhost
            deny all;
            access_log off;
        }
        
        # Status endpoint with service overview
        location /status {
            return 200 '{
                "status": "healthy",
                "gateway": "nginx",
                "version": "1.0.0",
                "services": {
                    "core": ["model-router", "plan-management", "git-worktree", "workflow-orchestrator", "verification-feedback"],
                    "agents": ["a2a-communication", "agent-pool", "collaboration-orchestrator"],
                    "specialized": ["planner-agent", "security-agent", "developer-agent", "agent-monitor"]
                },
                "endpoints": {
                    "model": "/api/model/",
                    "plans": "/api/plans/", 
                    "git": "/api/git/",
                    "workflows": "/api/workflows/",
                    "feedback": "/api/feedback/",
                    "agents": "/api/agents/",
                    "collaboration": "/api/collaboration/"
                },
                "timestamp": "$time_iso8601"
            }';
            add_header Content-Type application/json;
        }
        
        # Static assets for frontend (CSS, JS, images, etc.)
        location /_next/static/ {
            proxy_pass http://frontend;
            proxy_cache_valid 200 1d;
            expires 1d;
            add_header Cache-Control "public, immutable";
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # Frontend API routes (handled by Next.js)
        location /api/health {
            proxy_pass http://frontend;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # API documentation endpoint
        location /api/docs {
            return 200 '{
                "name": "MCP Agent Network API Gateway",
                "version": "1.0.0",
                "description": "Microservices-based AI Agent Network",
                "endpoints": {
                    "health": "/health",
                    "status": "/status", 
                    "metrics": "/metrics",
                    "api": {
                        "model_router": "/api/model/",
                        "plan_management": "/api/plans/",
                        "git_worktree": "/api/git/",
                        "workflow_orchestrator": "/api/workflows/",
                        "verification_feedback": "/api/feedback/",
                        "agent_pool": "/api/agents/",
                        "collaboration": "/api/collaboration/",
                        "specialized_agents": {
                            "planner": "/api/planner/",
                            "security": "/api/security/",
                            "developer": "/api/developer/",
                            "monitor": "/api/monitor/"
                        }
                    }
                },
                "documentation": "https://github.com/mcp-agent-network/docs",
                "timestamp": "$time_iso8601"
            }';
            add_header Content-Type application/json;
        }
        
        # Default route - serve frontend application
        location / {
            proxy_pass http://frontend;
            include /etc/nginx/conf.d/proxy_headers.conf;
            
            # Support for client-side routing
            try_files $uri $uri/ @fallback;
        }
        
        # Fallback for client-side routing
        location @fallback {
            proxy_pass http://frontend;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # Error pages
        error_page 404 /404.json;
        error_page 500 502 503 504 /50x.json;
        
        location = /404.json {
            internal;
            return 404 '{"error": "Not Found", "code": 404, "message": "The requested resource was not found"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.json {
            internal;
            return 500 '{"error": "Internal Server Error", "code": 500, "message": "Something went wrong on our end"}';
            add_header Content-Type application/json;
        }
    }
    
    # Staff Frontend Server Block
    server {
        listen 80;
        listen [::]:80;
        server_name staff.ethical-ai-insider.com staff-frontend;
        
        # Connection limits  
        limit_conn perip 10;
        limit_conn perserver 100;
        
        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy strict-origin-when-cross-origin always;
        add_header X-Gateway "MCP-Staff-Portal" always;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","gateway":"staff-nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Staff API routes - route to staff service
        location /api/staff/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/api/staff/(.*) /staff/$1 break;
            proxy_pass http://staff_service;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # Direct access to core services for staff functionality
        location /api/model/ {
            limit_req zone=model burst=30 nodelay;
            rewrite ^/api/model/(.*) /$1 break;
            proxy_pass http://model_router;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        location /api/plans/ {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/api/plans/(.*) /$1 break;
            proxy_pass http://plan_management;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        location /api/workflows/ {
            limit_req zone=workflow burst=5 nodelay;
            rewrite ^/api/workflows/(.*) /$1 break;
            proxy_pass http://workflow_orchestrator;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # Static assets for staff frontend
        location /_next/static/ {
            proxy_pass http://staff_frontend;
            proxy_cache_valid 200 1d;
            expires 1d;
            add_header Cache-Control "public, immutable";
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # Staff frontend API routes (handled by Next.js)
        location /api/health {
            proxy_pass http://staff_frontend;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # Default route - serve staff frontend application
        location / {
            proxy_pass http://staff_frontend;
            include /etc/nginx/conf.d/proxy_headers.conf;
            
            # Support for client-side routing
            try_files $uri $uri/ @staff_fallback;
        }
        
        # Fallback for staff client-side routing
        location @staff_fallback {
            proxy_pass http://staff_frontend;
            include /etc/nginx/conf.d/proxy_headers.conf;
        }
        
        # Error pages
        error_page 404 /404.json;
        error_page 500 502 503 504 /50x.json;
        
        location = /404.json {
            internal;
            return 404 '{"error": "Not Found", "code": 404, "message": "The requested resource was not found"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.json {
            internal;
            return 500 '{"error": "Internal Server Error", "code": 500, "message": "Something went wrong on our end"}';
            add_header Content-Type application/json;
        }
    }
}