user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    # Only define upstreams for services that are currently running
    upstream plan_management {
        least_conn;
        server plan-management:8002 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }
    
    upstream git_worktree {
        least_conn;
        server git-worktree-manager:8003 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }
    
    upstream workflow_orchestrator {
        least_conn;
        server workflow-orchestrator:8004 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }
    
    upstream staff_service {
        least_conn;
        server staff-service:8006 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }
    
    upstream frontend {
        least_conn;
        server frontend:3000 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }
    
    upstream staff_frontend {
        least_conn;
        server staff-frontend:3001 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }
    
    server {
        listen 80;
        server_name localhost _;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","gateway":"nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Plan Management endpoints  
        location /api/plans/ {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/api/plans/(.*) /$1 break;
            proxy_pass http://plan_management;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Git Worktree endpoints
        location /api/git/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/api/git/(.*) /$1 break;
            proxy_pass http://git_worktree;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }
        
        # Workflow Orchestrator endpoints
        location /api/workflows/ {
            limit_req zone=api burst=5 nodelay;
            rewrite ^/api/workflows/(.*) /$1 break;
            proxy_pass http://workflow_orchestrator;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
        
        # Staff Management endpoints
        location /api/staff/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/api/staff/(.*) /staff/$1 break;
            proxy_pass http://staff_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Status endpoint
        location /status {
            return 200 '{
                "status": "healthy",
                "gateway": "nginx",
                "version": "1.0.0",
                "available_services": ["plan-management", "git-worktree-manager", "workflow-orchestrator", "staff-service"],
                "endpoints": {
                    "plans": "/api/plans/", 
                    "git": "/api/git/",
                    "workflows": "/api/workflows/",
                    "staff": "/api/staff/"
                },
                "timestamp": "$time_iso8601"
            }';
            add_header Content-Type application/json;
        }
        
        # Default route - serve frontend application if available
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # If frontend is not available, show a fallback message
            error_page 502 503 504 = @fallback;
        }
        
        location @fallback {
            return 200 '{"message": "MCP API Gateway", "status": "partial", "available_endpoints": ["/api/plans/", "/api/git/", "/api/workflows/", "/api/staff/", "/health", "/status"]}';
            add_header Content-Type application/json;
        }
        
        # Error pages
        error_page 404 /404.json;
        error_page 500 502 503 504 /50x.json;
        
        location = /404.json {
            internal;
            return 404 '{"error": "Not Found", "code": 404, "message": "The requested resource was not found"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.json {
            internal;
            return 500 '{"error": "Internal Server Error", "code": 500, "message": "Something went wrong on our end"}';
            add_header Content-Type application/json;
        }
    }
    
    # Staff Frontend Server Block
    server {
        listen 80;
        server_name staff.ethical-ai-insider.com staff-frontend localhost:3001;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","gateway":"staff-nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Staff API routes
        location /api/staff/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/api/staff/(.*) /staff/$1 break;
            proxy_pass http://staff_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Default route - serve staff frontend application
        location / {
            proxy_pass http://staff_frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # If staff frontend is not available, show a fallback message
            error_page 502 503 504 = @staff_fallback;
        }
        
        location @staff_fallback {
            return 200 '{"message": "Staff Portal", "status": "unavailable", "staff_endpoints": ["/api/staff/"]}';
            add_header Content-Type application/json;
        }
    }
    server {
        listen 443;
        server_name localhost _;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","gateway":"nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Plan Management endpoints  
        location /api/plans/ {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/api/plans/(.*) /$1 break;
            proxy_pass http://plan_management;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Git Worktree endpoints
        location /api/git/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/api/git/(.*) /$1 break;
            proxy_pass http://git_worktree;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }
        
        # Workflow Orchestrator endpoints
        location /api/workflows/ {
            limit_req zone=api burst=5 nodelay;
            rewrite ^/api/workflows/(.*) /$1 break;
            proxy_pass http://workflow_orchestrator;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
        
        # Staff Management endpoints
        location /api/staff/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/api/staff/(.*) /staff/$1 break;
            proxy_pass http://staff_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Status endpoint
        location /status {
            return 200 '{
                "status": "healthy",
                "gateway": "nginx",
                "version": "1.0.0",
                "available_services": ["plan-management", "git-worktree-manager", "workflow-orchestrator", "staff-service"],
                "endpoints": {
                    "plans": "/api/plans/", 
                    "git": "/api/git/",
                    "workflows": "/api/workflows/",
                    "staff": "/api/staff/"
                },
                "timestamp": "$time_iso8601"
            }';
            add_header Content-Type application/json;
        }
        
        # Default route - serve frontend application if available
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # If frontend is not available, show a fallback message
            error_page 502 503 504 = @fallback;
        }
        
        location @fallback {
            return 200 '{"message": "MCP API Gateway", "status": "partial", "available_endpoints": ["/api/plans/", "/api/git/", "/api/workflows/", "/api/staff/", "/health", "/status"]}';
            add_header Content-Type application/json;
        }
        
        # Error pages
        error_page 404 /404.json;
        error_page 500 502 503 504 /50x.json;
        
        location = /404.json {
            internal;
            return 404 '{"error": "Not Found", "code": 404, "message": "The requested resource was not found"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.json {
            internal;
            return 500 '{"error": "Internal Server Error", "code": 500, "message": "Something went wrong on our end"}';
            add_header Content-Type application/json;
        }
    }
    
    # Staff Frontend Server Block
    server {
        listen 443;
        server_name staff.ethical-ai-insider.com staff-frontend localhost:3001;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","gateway":"staff-nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Staff API routes
        location /api/staff/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/api/staff/(.*) /staff/$1 break;
            proxy_pass http://staff_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Default route - serve staff frontend application
        location / {
            proxy_pass http://staff_frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # If staff frontend is not available, show a fallback message
            error_page 502 503 504 = @staff_fallback;
        }
        
        location @staff_fallback {
            return 200 '{"message": "Staff Portal", "status": "unavailable", "staff_endpoints": ["/api/staff/"]}';
            add_header Content-Type application/json;
        }
    }
}
