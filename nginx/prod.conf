# nginx/nginx.conf - API Gateway Configuration
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    
    # Upstream service definitions
    upstream model_router {
        least_conn;
        server model-router:8001 max_fails=3 fail_timeout=30s;
    }
    
    upstream plan_management {
        least_conn;
        server plan-management:8002 max_fails=3 fail_timeout=30s;
    }
    
    upstream git_worktree {
        least_conn;
        server git-worktree-manager:8003 max_fails=3 fail_timeout=30s;
    }
    
    upstream workflow_orchestrator {
        least_conn;
        server workflow-orchestrator:8004 max_fails=3 fail_timeout=30s;
    }
    
    upstream verification_feedback {
        least_conn;
        server verification-feedback:8005 max_fails=3 fail_timeout=30s;
    }
    
    # HTTP to HTTPS redirect for frontend
    server {
        listen 80;
        server_name new.ethical-ai-insider.com;
        return 301 https://$host$request_uri;
    }

    # HTTPS server for frontend
    server {
        listen 443 ssl;
        server_name new.ethical-ai-insider.com;

        ssl_certificate /etc/nginx/ssl/new.ethical-ai-insider.com.crt;
        ssl_certificate_key /etc/nginx/ssl/new.ethical-ai-insider.com.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        root /usr/share/nginx/html/rag-agent-frontend-dist; # Updated root for frontend build
        index index.html index.htm;

        location / {
            try_files $uri $uri/ /index.html;
        }

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
    }

    # Main API Gateway server configuration (remains on port 80 for internal Docker communication or other API access)
    server {
        listen 80;
        server_name localhost; # Or your API gateway domain if different
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Model Router endpoints
        location /api/model-router/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://model_router/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 60s;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
        }
        
        # Plan Management endpoints
        location /api/plan-management/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://plan_management/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 60s;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
        }
        
        # Git Worktree endpoints
        location /api/git-worktree/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://git_worktree/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 120s;  # Git operations can take longer
            proxy_connect_timeout 30s;
            proxy_send_timeout 120s;
        }
        
        # Workflow Orchestrator endpoints
        location /api/workflow/ {
            limit_req zone=api burst=10 nodelay;  # Lower burst for orchestrator
            proxy_pass http://workflow_orchestrator/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;  # Workflows can take several minutes
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
        }
        
        # Verification endpoints
        location /api/verification/ {
            limit_req zone=api burst=15 nodelay;
            proxy_pass http://verification_feedback/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 180s;  # Verification can take time
            proxy_connect_timeout 30s;
            proxy_send_timeout 180s;
        }
        
        # Metrics endpoint (for Prometheus)
        location /metrics {
            proxy_pass http://workflow_orchestrator/metrics;
            allow 172.20.0.0/16;  # Only allow from docker network
            deny all;
        }
        
        # Default route
        location / {
            return 200 '{"status": "MCP Microservices API Gateway", "version": "1.0.0"}';
            add_header Content-Type application/json;
        }
    }
}