import chalk from 'chalk';import { table } from 'table';import ora from 'ora';import * as config from '../config';import { HttpClient } from '../lib/http-client';export async function status() {  console.log(chalk.blue.bold('üîç MCP Agent Network Status\n'));  const services = Object.entries(config.services);  const results = [];  for (const [name, serviceConfig] of services) {    const spinner = ora(`Checking ${name}...`).start();    try {      const client = new HttpClient(serviceConfig);      const startTime = Date.now();      await client.healthCheck();      const responseTime = Date.now() - startTime;      results.push([        chalk.green(name),        chalk.green('‚úì Healthy'),        `${responseTime}ms`,        serviceConfig.url      ]);      spinner.succeed(`${name} is healthy`);    } catch (error: any) {      results.push([        chalk.red(name),        chalk.red('‚úó Unhealthy'),        'N/A',        serviceConfig.url      ]);      spinner.fail(`${name} is unhealthy: ${error.message}`);    }  }  console.log('\nüìä Service Summary:');  const tableConfig = {    header: {      alignment: 'center' as const,      content: chalk.bold('Service Status Overview')    },    columns: {      0: { alignment: 'left' as const, width: 20 },      1: { alignment: 'center' as const, width: 15 },      2: { alignment: 'right' as const, width: 12 },      3: { alignment: 'left' as const, width: 30 }    }  };  console.log(table([    [chalk.bold('Service'), chalk.bold('Status'), chalk.bold('Response'), chalk.bold('URL')],    ...results  ], tableConfig));}export async function health() {  console.log(chalk.blue.bold('üè• Health Check Details\n'));  const services = Object.entries(config.services);  for (const [name, serviceConfig] of services) {    console.log(chalk.cyan.bold(`\n${name.toUpperCase()}:`));    console.log(chalk.gray(`URL: ${serviceConfig.url}`));    try {      const client = new HttpClient(serviceConfig);      const startTime = Date.now();      const health = await client.healthCheck();      const responseTime = Date.now() - startTime;      console.log(chalk.green(`‚úì Status: ${health.status}`));      console.log(chalk.blue(`‚è± Response Time: ${responseTime}ms`));      if (health.version) {        console.log(chalk.gray(`üì¶ Version: ${health.version}`));      }      if (health.uptime) {        console.log(chalk.gray(`‚è≥ Uptime: ${health.uptime}`));      }    } catch (error: any) {      console.log(chalk.red(`‚úó Error: ${error.message}`));    }  }}