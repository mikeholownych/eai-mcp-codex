# docker-compose.prod.yml - Production Overrides
services:
  # Production-specific overrides
  model-router:
    environment:
      - LOG_LEVEL=INFO
      - DEBUG_MODE=false
      - WORKERS=4
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: always
    depends_on:
      mcp-fluentd:
        condition: service_healthy
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "localhost:24224"
        tag: "{{.Name}}"

  plan-management:
    environment:
      - LOG_LEVEL=INFO
      - AUTO_BACKUP=true
      - BACKUP_INTERVAL=1800
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 768M
          cpus: '0.8'
        reservations:
          memory: 384M
          cpus: '0.4'
    restart: always

  git-worktree-manager:
    environment:
      - LOG_LEVEL=INFO
      - AUTO_CLEANUP=true
      - CLEANUP_INTERVAL=3600
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.6'
        reservations:
          memory: 256M
          cpus: '0.3'
    restart: always

  workflow-orchestrator:
    environment:
      - LOG_LEVEL=INFO
      - MAX_CONCURRENT_WORKFLOWS=5
      - STEP_TIMEOUT=3600
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: always

  verification-feedback:
    environment:
      - LOG_LEVEL=INFO
      - STRICT_VERIFICATION=true
      - PARALLEL_VERIFICATION=false
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 768M
          cpus: '0.8'
        reservations:
          memory: 384M
          cpus: '0.4'
    restart: always

  # Production fluentd
  mcp-fluentd:
    restart: always

  # Production database with performance tuning
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    restart: unless-stopped

    environment:
      POSTGRES_DB: mcp_database
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcp_secure_password}
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
      PGDATA: /var/lib/postgresql/data/pgdata

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro

    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c temp_file_limit=2GB
      -c log_min_duration_statement=1000
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_database"]
      interval: 10s
      timeout: 5s
      retries: 5

    ports:
      - "5432:5432"

    logging:
      driver: "fluentd"
      options:
        fluentd-address: "localhost:24224"
        tag: "mcp-postgres"

    networks:
      - mcp-network

    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.75'

    depends_on:
      mcp-fluentd:
        condition: service_healthy

  # Production Redis with persistence
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: always

    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0

    ports:
      - "6379:6379"

    volumes:
      - redis_data:/data

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

    logging:
      driver: "fluentd"
      options:
        fluentd-address: "localhost:24224"
        tag: "mcp-redis"

    networks:
      - mcp-network

    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
        reservations:
          memory: 384M
          cpus: '0.25'

  # Production Nginx with SSL
  nginx:
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    restart: always

  # Remove development tools in production
  dev-tools:
    profiles:
      - dev
